var searchIndex = JSON.parse('{\
"rich_sdl2_image_rust":{"doc":"rich-sdl2-image-rust","t":[3,3,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,8,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,10,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Img","ImgInitFlag","JPEG","PNG","TIFF","WEBP","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","difference","drop","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","format","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","ne","new","not","partial_cmp","remove","set","sub","sub_assign","surface","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","version","Bmp","Cur","Gif","Ico","ImgChecker","ImgFormat","Jpeg","Lbm","Pcx","Png","Pnm","Tiff","WebP","Xcf","Xpm","Xv","borrow","borrow_mut","clone","clone_into","eq","fmt","format","from","into","to_owned","try_from","try_into","type_id","ImgSurface","as_ptr","borrow","borrow_mut","drop","from","from_xpm","into","new","save_bmp","try_from","try_into","type_id"],"q":["rich_sdl2_image_rust","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_image_rust::format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rich_sdl2_image_rust::surface","","","","","","","","","","","",""],"d":["A root controller for sdl_image.","A flag to init an <code>Img</code> controller.","To load JPEG format loader.","To load PNG format loader.","To load TIFF format loader.","To load WebP format loader.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>…","","Returns an empty set of flags.","","","","","","","","Format checker extension for <code>RwOps</code>.","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Constructs a new root controller.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Image surface to load some image format to <code>Surface</code>.","Returns the symmetric difference between the flags in <code>self</code>…","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the library version of SDL2_image.","","","","","An extension for checking format of an image.","","","","","","","","","","","","","","","","","","Determines the format of the image file, or <code>None</code> if not …","","","","","","","An image surface for the loaded picture.","","","","","","Constructs a new image surface from XPM format str slice.","","Constructs a new image surface from the file. The format …","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,0,1,1,1,2,1,2,1,2,1,1,2,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[["imginitflag",3]]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["imginitflag",3]],[[]],[[["imginitflag",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["imginitflag",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["imginitflag",3]],["bool",15]],[[["imginitflag",3]],["result",6]],[[]],[[["imginitflag",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[["bool",15]]],[[]],[[]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["sdlversion",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["imgformat",4]],[[]],[[["imgformat",4]],["bool",15]],[[["formatter",3]],["result",6]],[[],[["option",4,["imgformat"]],["imgformat",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],[["nonnull",3,["rawsurface"]],["rawsurface",3]]],[[]],[[]],[[]],[[]],[[["img",3]],["result",6]],[[]],[[["img",3],["str",15],["option",4,["str"]]],["result",6]],[[["str",15]],[["bmpsaveerror",3],["result",4,["bmpsaveerror"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ImgInitFlag"],[3,"Img"],[4,"ImgFormat"],[8,"ImgChecker"],[3,"ImgSurface"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};